{:min-bb-version "0.7.6"
 :paths ["bb"]
 :deps {io.github.nextjournal/dejavu
        {:git/sha "3c4cf5e4dda3648e0d4c575a3433d19c511dd3e5"}}
 :tasks
 {:requires ([clojure.edn :as edn]
             [clojure.edn :as edn]
             [clojure.string :as str]
             [babashka.deps :as deps]
             [babashka.fs :as fs]
             [babashka.process :as p])
  :init (do
          (defn viewer-css-path []
            (let [cp (str/trim (with-out-str (deps/clojure ["-A:sci" "-Spath"])))]
              (str/trim (:out (shell {:out :string} (str "bb -cp " cp " -e '(println (.getPath (clojure.java.io/resource \"css/viewer.css\")))'"))))))

          (defn latest-sha []
            (str/trim (:out (p/sh "git rev-parse HEAD"))))

          (defn version []
            (-> (slurp "resources/META-INF/nextjournal/clerk/meta.edn")
                edn/read-string
                :version)))

  copy-viewer-css {:doc "TODO: please complement this docstring"
                   :task
                   (fs/copy (viewer-css-path)
                            "resources/stylesheets/viewer.css" #{:replace-existing})}

  yarn-install {:doc "Installs and updates npm dependencies"
                :task (shell "yarn install")}

  watch:cljs {:doc "Starts shadow-cljs & clerk"
              :task (apply clojure "-X:test:sci:demo:dev" *command-line-args*)
              :depends [yarn-install]}

  build:js {:doc "Builds JS"
            :depends [yarn-install]
            :task (clojure "-M:sci:demo:dev release browser")}

  write-hash {:doc "Write viewer resource hash to resources. Intended to be used in a pre-commit hook."
              :task viewer-resources-hashing/write-viewer-resource-hash}

  build+upload-viewer-resources {:doc "Refreshes assets stored on CDN (google storage)"
                                 :task viewer-resources-hashing/build+upload-viewer-resources}

  release:js {:doc "Uploads the js release and updates the sha reference."
              :task (clojure "-T:build upload-to-cas :resource viewer.js")
              :depends [build:js]}

  build:static-app {:doc "Builds a static app with default notebooks"
                    :depends [release:js]
                    :task (clojure "-X:demo nextjournal.clerk/build-static-app!")}

  test:clj {:doc "Run clojure tests"
            :task (apply clojure "-X:test" *command-line-args*)}

  test:static-app {:doc "Run UI tests for current SHA. Provide SHA as command line arg."
                   :task (do
                           (shell {:dir "ui_tests"} "yarn install")
                           (apply shell {:dir "ui_tests"}
                                  "yarn nbb -m playwright-tests"
                                  (or *command-line-args* [(latest-sha)])))}

  update-meta {:doc "Updates meta.edn with current version (based on commit count currently)."
               :task
               (let [rev-count (-> (p/process ["git" "rev-list" "HEAD" "--count"] {:out :string})
                                   p/check :out str/trim Integer/parseInt)
                     version (format "0.8.%d" (inc rev-count))]
                 (spit (doto (fs/file "resources/META-INF/nextjournal/clerk/meta.edn")
                         (-> fs/parent fs/create-dirs)) {:version version}))}

  jar {:doc "Build jar"
       :task (do
               (println "Building jar")
               (clojure "-T:build jar"))}

  install-jar {:doc "Installs jar for local testing"
               :task (clojure "-T:build install")}

  tag {:doc "Tags release and pushes tag to Github."
       :task (let [tag (str "v" (version))]
               (shell "git tag" tag))}

  clerk-version {:doc "Prints current version"
                 :task (println (version))}

  publish {:doc "Prepares repo for publishing via CI"
           :task (do
                   (run 'update-meta)
                   (shell "git add resources/viewer-js-hash resources/META-INF")
                   (shell (str "git commit -m v" (version)))
                   (run 'tag)
                   (shell "git push --atomic"
                          "origin" "main" (str "v" (version))))}

  -current-tag (->> (shell {:out :string} "git tag --points-at HEAD")
                    :out
                    str/trim
                    not-empty)

  -current-branch (->> (shell {:out :string} "git branch --show-current")
                       :out
                       str/trim)

  ci:publish {:doc "Publish task which will be run on CI"
              :depends [-current-tag -current-branch]
              :task (do
                      (prn :current-tag -current-tag)
                      (prn :current-branch -current-branch)
                      (if (and -current-tag (= "main" -current-branch))
                        (do
                          (println "Deploying to clojars")
                          (clojure "-T:build deploy"))
                        ;; still build jar for artifact upload
                        (run 'jar)))}

  install-git-hooks {:doc "Install git hooks"
                     :task (fs/copy "dev/pre-commit" ".git/hooks" {:replace-existing true})}

  -dev {:depends [install-git-hooks watch:cljs copy-viewer-css]}
  dev {:doc "Start app in dev mode, compiles cljs and css"
       :task (run '-dev {:parallel true})}}}
