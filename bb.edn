{:tasks {:requires ([clojure.edn :as edn]
                    [clojure.string :as str]
                    [babashka.deps :as deps]
                    [babashka.fs :as fs]
                    [babashka.process :as p])
         :init (defn viewer-css-path []
                 (let [cp (str/trim (with-out-str (deps/clojure ["-A:sci" "-Spath"])))]
                   (str/trim (:out (shell {:out :string} (str "bb -cp " cp " -e '(println (.getPath (clojure.java.io/resource \"css/viewer.css\")))'"))))))


         print-viewer-css {:task (println (viewer-css-path))}
         copy-viewer-css {:task (fs/copy (viewer-css-path) "resources/stylesheets/viewer.css" #{:replace-existing})}

         yarn-install {:doc "Installs and updates npm dependencies"
                       :task (shell "yarn install")}

         watch:cljs {:doc "Starts shadow-cljs server"
                     :task (clojure "-M:test:sci:demo:dev watch browser")
                     :depends [yarn-install]}

         release:js {:doc "Builds & uploads the js release and updates the sha reference."
                     :task (do (clojure "-M:sci:demo:dev release browser")
                               (clojure "-T:build upload-to-cas+rewrite-sha :resource viewer.js"))
                     :depends [yarn-install]}

         build:static-app {:doc "Builds a static app with default notebooks"
                           :depends [release:js release:css]
                           :task (clojure "-X:demo nextjournal.clerk/build-static-app!")}

         release:jar {:doc "Builds the jar"
                      :task (let [rev-count (-> (p/process ["git" "rev-list" "HEAD" "--count"] {:out :string}) p/check :out str/trim Integer/parseInt)
                                  version (format "0.4.%d" (inc rev-count))]
                              (spit (doto (fs/file "resources/META-INF/nextjournal/clerk/meta.edn")
                                      (-> fs/parent fs/create-dirs)) {:version version})
                              (clojure "-T:build jar"))}

         deploy {:doc "Deploys the jar to clojars"
                 :task (clojure "-T:build deploy")}

         tag {:doc "Tags release and pushes tag to Github."
              :task (let [version (-> (slurp "resources/META-INF/nextjournal/clerk/meta.edn")
                                      edn/read-string
                                      :version)
                          tag (str "v" version)]
                      (shell "git tag" tag)
                      (shell "git push origin" tag))}

         -dev {:depends [watch:cljs copy-viewer-css]}
         dev {:doc "Start app in dev mode, compiles cljs and css"
              :task (run '-dev {:parallel true})}}
 :min-bb-version "0.5.1"}
