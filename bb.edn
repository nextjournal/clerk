{:min-bb-version "0.9.159"
 :paths ["bb"]
 :deps {io.github.nextjournal/dejavu
        {:git/sha "3c4cf5e4dda3648e0d4c575a3433d19c511dd3e5"}}
 :tasks
 {:requires
  ([tasks :as t]
   [clojure.string :as str]
   [babashka.process :as p]
   [babashka.fs :as fs]
   [babashka.cli :as cli])

  copy-viewer-css {:doc "TODO: please complement this docstring"
                   :task
                   (fs/copy (t/viewer-css-path)
                            "resources/stylesheets/viewer.css" #{:replace-existing})}

  yarn-install {:doc "Installs and updates npm dependencies"
                :task (shell "yarn install")}

  watch:cljs {:doc "Starts shadow-cljs & clerk"
              :task (apply clojure "-X:test:sci:demo:dev" *command-line-args*)
              :depends [yarn-install]}

  build:js {:doc "Builds JS"
            :depends [yarn-install]
            :task (clojure "-M:sci:demo:dev release browser")}

  write-hash {:doc "Write viewer resource hash to resources. Intended to be used in a pre-commit hook."
              :task viewer-resources-hashing/write-viewer-resource-hash}

  build+upload-viewer-resources {:doc "Refreshes assets stored on CDN (google storage)"
                                 :task viewer-resources-hashing/build+upload-viewer-resources}

  release:js {:doc "Uploads the js release and updates the sha reference."
              :task (clojure "-T:build upload-to-cas :resource viewer.js")
              :depends [build:js]}

  build:static-app {:doc "Builds a static app with default notebooks"
                    :task (apply clojure "-X:demo:nextjournal/clerk" *command-line-args*)}

  test:clj {:doc "Run clojure tests"
            :task (apply clojure "-X:test" *command-line-args*)}

  test:static-app {:doc "Run UI tests for current SHA. Provide SHA as command line arg."
                   :task (do (shell {:dir "ui_tests"} "yarn install")
                             (shell {:dir "ui_tests"} "yarn nbb -m playwright-tests"
                                    (or (when-let [args (not-empty (cli/parse-opts *command-line-args*))]
                                          (cond-> args
                                            (contains? args :file)
                                            (assoc :url (str "file://" (fs/cwd) fs/file-separator (:file args)))))
                                        {:sha (-> (shell {:out :string} "git rev-parse HEAD")
                                                  :out
                                                  str/trim)})))}

  update-meta {:doc "Updates meta.edn with current version (based on commit count currently)."
               :task (t/update-meta)}

  update-changelog
  {:doc "Updates CHANGELOG.md with "
   :task
   (t/update-changelog)}

  jar {:doc "Build jar"
       :task (do
               (println "Building jar")
               (clojure "-T:build jar"))}

  install-jar {:doc "Installs jar for local testing"
               :task (clojure "-T:build install")}

  tag {:doc "Tags release and pushes tag to Github."
       :task (t/tag)}

  clerk-version {:doc "Prints current version"
                 :task (println (t/version))}

  publish {:doc "Prepares repo for publishing via CI"
           :task (t/publish)}

  -current-tag (->> (shell {:out :string} "git tag --points-at HEAD")
                    :out
                    str/trim
                    not-empty)

  -current-branch (->> (shell {:out :string} "git branch --show-current")
                       :out
                       str/trim)

  ci:publish {:doc "Publish task which will be run on CI"
              :depends [-current-tag -current-branch]
              :task (do
                      (prn :current-tag -current-tag)
                      (prn :current-branch -current-branch)
                      (if (and -current-tag (= "main" -current-branch))
                        (do
                          (println "Deploying to clojars")
                          (clojure "-T:build deploy"))
                        ;; still build jar for artifact upload
                        (run 'jar)))}

  install-git-hooks {:doc "Install git hooks"
                     :task (fs/copy "dev/pre-commit" ".git/hooks" {:replace-existing true})}

  -dev {:depends [install-git-hooks watch:cljs copy-viewer-css]}
  dev {:doc "Start app in dev mode, compiles cljs and css"
       :task (run '-dev {:parallel true})}}}
