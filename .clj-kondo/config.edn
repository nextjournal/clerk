{:config-paths ["../resources/clj-kondo.exports/nextjournal/clerk"]
 :lint-as {applied-science.js-interop/defn clojure.core/defn
           applied-science.js-interop/fn clojure.core/fn
           applied-science.js-interop/let clojure.core/let
           cljs.core/specify! cljs.core/reify
           reagent.core/with-let clojure.core/let
           taoensso.encore/defonce clojure.core/defonce
           taoensso.encore/defalias clojure.core/def
           promesa.core/let clojure.core/let
           shadow.cljs.modern/defclass clojure.core/defprotocol}
 :linters {:consistent-alias {:aliases {datomic.api datomic
                                        clojure.string str
                                        clojure.spec.alpha s}}
           :unresolved-symbol {:exclude [(cljs.core.match/match)
                                         (cljs.test/is [match? thrown-match?])
                                         (clojure.test/is [match? thrown-match?])
                                         (clojure.core.match/match)
                                         (taoensso.nippy/extend-freeze)
                                         (taoensso.nippy/extend-thaw)]}
           :unused-namespace {:exclude [clojure.string]}}
 :hooks {:macroexpand {multihash.digest/defhash hooks/defhash}}
 :config-in-call {clojure.core/defn {:linters {:unused-binding {:level :off}}}
                  cljs.core/defn {:linters {:unused-binding {:level :off}}}
                  clojure.core/fn {:linters {:unused-binding {:level :warning}}}
                  cljs.core/fn {:linters {:unused-binding {:level :warning}}}
                  clojure.core/let {:linters {:unused-binding {:level :warning}}}
                  cljs.core/let {:linters {:unused-binding {:level :warning}}}
                  cljs.core/comment {:linters {:unresolved-symbol {:level :off}
                                               :unresolved-namespace {:level :off}}}
                  clojure.core/comment {:linters {:unresolved-namespace {:exclude [nextjournal.clerk
                                                                                   nextjournal.clerk.builder
                                                                                   clojure.java.io
                                                                                   clojure.string
                                                                                   clojure.set
                                                                                   clojure.walk]}}}
                  shadow.cljs.modern/defclass {:linters {:redefined-var {:level :off}}}}}
